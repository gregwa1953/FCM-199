#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Nov 10, 2023 04:23:26 AM CST  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import tkintermapviewdemo_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = '#8ba5cc' # Closest X11 color: 'LightSkyBlue3'
_ana1color = '#c5cc8b' # Closest X11 color: 'wheat3'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1020x760+739+462")
        top.minsize(1, 1)
        top.maxsize(2545, 1410)
        top.resizable(0,  0)
        top.title("Toplevel 0")
        top.configure(highlightbackground="navajowhite3")
        top.configure(highlightcolor="black")

        self.top = top
        self.search_address = tk.StringVar()

        _style_code()
        self.TFrame1 = ttk.Frame(self.top)
        self.TFrame1.place(x=2, y=2, height=55, width=1016)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")
        self.btnExit = ttk.Button(self.TFrame1)
        self.btnExit.place(x=960, y=4, height=42, width=42)
        self.btnExit.configure(command=tkintermapviewdemo_support.on_btnExit)
        self.btnExit.configure(takefocus="")
        photo_location = os.path.join(_location,"./graphics/system-shutdown.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.btnExit.configure(image=_img0)
        self.btnExit.configure(compound='none')
        self.btnExit.configure(style='Toolbutton')
        self.TLabel1 = ttk.Label(self.TFrame1)
        self.TLabel1.place(x=90, y=20, height=19, width=102)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='e')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Search:''')
        self.TLabel1.configure(compound='left')
        self.btnGo = ttk.Button(self.TFrame1)
        self.btnGo.place(x=428, y=15, height=28, width=83)
        self.btnGo.configure(command=tkintermapviewdemo_support.on_btnGo)
        self.btnGo.configure(takefocus="")
        self.btnGo.configure(text='''GO!''')
        self.btnGo.configure(compound='left')
        self.TEntry1 = ttk.Entry(self.TFrame1)
        self.TEntry1.place(x=194, y=19, height=21, width=224)
        self.TEntry1.configure(textvariable=self.search_address)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="xterm")
        self.btnCreateMarker = ttk.Button(self.top)
        self.btnCreateMarker.place(x=30, y=70, height=28, width=144)
        self.btnCreateMarker.configure(command=tkintermapviewdemo_support.on_btnCreateMarker)
        self.btnCreateMarker.configure(takefocus="")
        self.btnCreateMarker.configure(text='''Create Marker''')
        self.btnCreateMarker.configure(compound='left')
        self.btnClearMarkers = ttk.Button(self.top)
        self.btnClearMarkers.place(x=188, y=70, height=28, width=144)
        self.btnClearMarkers.configure(command=tkintermapviewdemo_support.on_btnClearMarkers)
        self.btnClearMarkers.configure(takefocus="")
        self.btnClearMarkers.configure(text='''Clear Markers''')
        self.btnClearMarkers.configure(compound='left')
        self.btnCreatePath = ttk.Button(self.top)
        self.btnCreatePath.place(x=345, y=70, height=28, width=144)
        self.btnCreatePath.configure(command=tkintermapviewdemo_support.on_btnCreatePath)
        self.btnCreatePath.configure(takefocus="")
        self.btnCreatePath.configure(text='''Create Path''')
        self.btnCreatePath.configure(compound='left')
        self.btnClearPath = ttk.Button(self.top)
        self.btnClearPath.place(x=504, y=70, height=28, width=144)
        self.btnClearPath.configure(command=tkintermapviewdemo_support.on_btnClearPath)
        self.btnClearPath.configure(takefocus="")
        self.btnClearPath.configure(text='''Clear Path''')
        self.btnClearPath.configure(compound='left')
        self.TLabel2 = ttk.Label(self.top)
        self.TLabel2.place(x=820, y=90, height=19, width=173)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='center')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Markers:''')
        self.TLabel2.configure(compound='left')
        self.Scrolledlistbox1 = ScrolledListBox(self.top)
        self.Scrolledlistbox1.place(x=810, y=120, height=278, width=200)
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(cursor="xterm")
        self.Scrolledlistbox1.configure(disabledforeground="#9a8668")
        self.Scrolledlistbox1.configure(exportselection="0")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(highlightbackground="navajowhite3")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#b9a17d")
        self.TFrame2 = ttk.Frame(self.top)
        self.TFrame2.place(x=6, y=120, height=599, width=799)
        self.TFrame2.configure(relief='groove')
        self.TFrame2.configure(borderwidth="2")
        self.TFrame2.configure(relief="groove")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    tkintermapviewdemo_support.main()

if __name__ == '__main__':
    tkintermapviewdemo_support.main()




